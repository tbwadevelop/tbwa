<?php
include_once 'blocks/agenda.block.inc';
include_once 'forms/agenda.forms.inc';
require_once(DRUPAL_ROOT . "/modules/node/node.pages.inc");
define('FIRST_POSITION', 0); 

/**
 * Implements hook_init().
 */
function agenda_init() {
   Global $base_url;
   drupal_add_js(array('agenda' => array('dominio' => $base_url)), array('type' => 'setting'));
   drupal_add_js(drupal_get_path('module', 'agenda') . '/js/request.js');
   if (current_path() == 'calendario-consejero/diario') {
      drupal_add_js(drupal_get_path('module', 'agenda') . '/js/agenda.js');
    }
}

function agenda_preprocess_html(&$variables) {
   drupal_add_css(drupal_get_path('module', 'agenda') . '/css/style.css');
}

/**
 * Implementacion del hook menu.
 */

function agenda_menu() {
 $items = array();
 $items['request/%ctools_js'] = array(
    'title' => t('Create node api ctools'),
    'page callback' => 'request_callback',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['availability/%/%ctools_js'] = array(
      'title' => t('Render node save api ctools'),
      'page callback' => 'render_availability',
      'page arguments' => array(1),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    );

  $items['availability-edit/%/%ctools_js'] = array(
      'title' => t('Edit node api ctools'),
      'page callback' => 'edit_availability',
      'page arguments' => array(1),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    );

  $items['availability-delete/%/%ctools_js'] = array(
      'title' => t('Delete node api ctools'),
      'page callback' => 'delete_availability',
      'page arguments' => array(1),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    );


  $items['quotes-delete/%/%ctools_js'] = array(
      'title' => t('Delete Quotes api ctools'),
      'page callback' => 'quotes_delete',
      'page arguments' => array(1),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    );


   return $items;
}

/**
 * Implements hook_form_alter().
 */

function agenda_form_alter(&$form, &$form_state, $form_id) {
    Global $user;
    switch ($form_id) {
     case 'disponibilidad_node_form':
         $form['title']['#required'] = FALSE;
         $current_path = explode("/", current_path());
         $path = array_shift($current_path);
         if (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == 'edit' && !user_access('administrator') && is_numeric($_GET['sid'])) {
              $form['title']['#access'] = FALSE;
              $form['field_operaciones']['#access'] = FALSE;
              $form['field_usuario']['#access'] = FALSE;
              $form['field_profile']['#access'] = FALSE;
              $form['field_repeticion']['#access'] = FALSE;
              $form['field_cupo']['#access'] = FALSE;
              $form['field_lugar']['#access'] = FALSE;     
              $form['field_fecha']['#access'] = FALSE;     
              $form['field_encabezado']['#access'] = FALSE;
               $form['field_citas_agenda']['und']['add_more']['#access'] = FALSE;
             foreach ($form['field_citas_agenda']['und'] as $key => $value) {
                 if (is_array($value) && isset($value['#entity']->field_collec_uid) && $form['field_citas_agenda']['und'][$key]['#entity']->field_collec_uid['und'][0]['value'] == $_GET['sid']) {
                      $form['field_citas_agenda']['und'][$key]['field_collec_nombre']['#access'] = FALSE;
                      $form['field_citas_agenda']['und'][$key]['field_collec_apellido']['#access'] = FALSE;
                      $form['field_citas_agenda']['und'][$key]['field_collec_codigo']['#access'] = FALSE;
                      $form['field_citas_agenda']['und'][$key]['field_collec_uid']['#access'] = FALSE;
                      $form['field_citas_agenda']['und'][$key]['field_collec_usuario']['#access'] = FALSE;
                      $form['field_citas_agenda']['und'][$key]['field_collec_numero_de_documento']['#access'] = FALSE; 
                      $form['field_citas_agenda']['und'][$key]['remove_button'] = FALSE;
                  }else if (is_numeric($key)){
                      $form['field_citas_agenda']['und'][$key]['field_collec_nombre']['#access'] = FALSE;
                      $form['field_citas_agenda']['und'][$key]['field_collec_apellido']['#access'] = FALSE;
                      $form['field_citas_agenda']['und'][$key]['field_collec_codigo']['#access'] = FALSE;
                      $form['field_citas_agenda']['und'][$key]['field_collec_uid']['#access'] = FALSE;
                      $form['field_citas_agenda']['und'][$key]['field_collec_usuario']['#access'] = FALSE;
                      $form['field_citas_agenda']['und'][$key]['field_collec_numero_de_documento']['#access'] = FALSE; 
                      $form['field_citas_agenda']['und'][$key]['field_collec_motivo']['#access'] = FALSE; 
                      $form['field_citas_agenda']['und'][$key]['field_tipo_de_atencion']['#access'] = FALSE; 
                      $form['field_citas_agenda']['und'][$key]['field_collec_asistencia']['#access'] = FALSE;
                      $form['field_citas_agenda']['und'][$key]['field_render_view_estudiante']['#access'] = FALSE;
                      $form['field_citas_agenda']['und'][$key]['field_comentario_cita']['#access'] = FALSE;       
                      $form['field_citas_agenda']['und'][$key]['remove_button'] = FALSE;
                  }         
             }
          }

       if ($path == 'request' || $path == 'availability-edit') {
           $form['title']['#access'] = FALSE;
           $form['field_operaciones']['#access'] = FALSE;
           $form['field_usuario']['#access'] = FALSE;
           $form['field_profile']['#access'] = FALSE;
           $form['field_citas_agenda']['#access'] = FALSE;
           $form['field_historial_citas']['#access'] = FALSE;
           $form['actions']['cancel'] = array(
              '#markup' => l(t('Cancel'), '#',
                 array('attributes' => array('class' => 'ctools-close-modal'),
                   'external' => TRUE))
                 );
       }

      if (current_path() == 'request/ajax') {
         $form['field_citas_agenda']['#access'] = FALSE;
         $form['field_profile']['#access'] = FALSE;
         $form['actions']['cancel'] = array(
          '#markup' => l(t('Cancel'), '#',
             array('attributes' => array('class' => 'ctools-close-modal'),
                'external' => TRUE))
             );
      }
      break;
     case 'user_login':
         $form['name']['#title'] = t('Ingresar');
         $form['pass']['#title'] = '';
         $form['name']['#required'] = FALSE;
          $form['info'] = array(
            '#type' => 'item',
            '#markup' => t('Las personas que no tengan usuario y clave uniandes pueden comunicarse con la Decanatura de Estudiantes para recibir atención personalizada, en el teléfono 339 49 49 Ext. 2207, de lunes a viernes en horario de 8:00 a.m a 5:00 p.m.'),
            '#attributes' => array('class' => array('info-extra-login')),
          );
          $form['enlace'] = array(
            '#type' => 'item',
            '#markup' => l(t('Olvido su clave'), 'user/password'),
            '#attributes' => array('class' => array('info-link-login')),
          );          
      break;
      case 'user_profile_form':
          if(!user_access('administrator')) {
            $form['account']['#access'] = FALSE;
            $form['picture']['#access'] = FALSE;
          }
      break;
      } 
}

/**
 * Implements hook_node_presave().
 */

function agenda_node_presave($node) {
  if ($node->type == 'disponibilidad') {
     $node->title = $node->name . " - " . date('m-d-Y',$node->created);
     $wrapper = entity_metadata_wrapper('node', $node);
     $date = $wrapper->field_fecha->value();
     $time = date_format(date_create($date['value']), 'g:i A') . ' - ' . date_format(date_create($date['value2']), 'g:i A'); 
     $service = $wrapper->field_tipo_de_servicio->value()->name;
     $wrapper->field_operaciones->set($time . ' ' . $service); 
  }
} 

/**
 * Implements hook_field_formatter_info().
 */

function agenda_field_formatter_info() {
  $info = array(
      'operation_node' => array(
        'label' => t('Operation Node'), 
        'field types' => array('text'),
        'description' => t('Field manage edit/delete for node'),
      ), 
    );
  return $info; 
}

/**
 * Implements hook_field_formatter_view().
 */

function agenda_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
    $element = array();
      switch ($display['type']) {
        case 'operation_node':
          foreach ($items as $delta => $item) {
            $element[$delta] = array(
              '#theme' => 'operations-node-availability', 
            );
         }
          break;
      }
      return $element; 
}

/**
 * Implements hook_theme().
 */

function agenda_theme($existing, $type, $theme, $path) {
  $module_path = drupal_get_path('module', 'agenda');
  $base = array(
    'path' => "$module_path/theme",
  );
  $themes = array(
    'item-calendar' => $base + array(
     'template' => 'item-calendar',
     'variables' => array('value' => NULL),
    ),
  );

  $themes = array(
    'operations-node-availability' => array(
    'template' => 'theme/operations-node-availability',
    ),
  );

  return $themes; 
}

/**
 * Implements hook_help().
 */

function agenda_help($path, $arg) {
  switch ($path) {
    case 'admin/help#agenda':
      return '<p>' . t('Help module', array('storage' => 'Help module' )) . '</p>';
  }
}

/**
 * Implements hook_permission().
 */

function agenda_permission() {
  return array(
    'administer agenda' =>  array(
      'title' => t('Administer Agenda'),
      'description' => t('Perform administration agenda'),
    ),
  );
}

/**
 * Implements hook_theme_registry_alter().
 */

function agenda_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['calendar_item'])) {
     $theme_registry['calendar_item']['path'] = drupal_get_path('module', 'agenda') . '/theme';
     $theme_registry['calendar_item']['theme path'] = drupal_get_path('module', 'agenda') . '/theme';
     $theme_registry['calendar_item']['template'] = 'item-calendar';
  }
}


/**
 * Implementation of hook_views_api().
 */
function agenda_views_api() {
    return array(
     'api' => 3,
     'path' => drupal_get_path('module', 'agenda') . '/views',
   );   
}



/**
 * Callback function render obj(node) availability.
 */

function render_availability($js) {
 if ($js) {
    ctools_include('modal');
    ctools_include('ajax');
  }
  $node = node_load(arg(1));
  $contents = render(node_view($node, 'teaser', NULL));
  return ctools_modal_render(t('Disponibilidad'), $contents);
}

/**
 * Callback function render new obj(node) availability.
 */

function request_callback($ajax){
    if ($ajax) {
     global $user;
     ctools_include('node.pages', 'node', '');
     ctools_include('modal');
     ctools_include('ajax');

     $node = (object) array(
         'uid' => $user->uid,
         'name' => (isset($user->name) ? $user->name : ''),
         'type' => variable_get('content_type'),
         'language' => LANGUAGE_NONE,
     );

     $form_state = array(
         'ajax' => TRUE,
         'title' => t('Creación de disponibilidad'),
         'class' => array('add availability'),
     );


     $form_state['build_info']['args'] = array($node);
     $output = ctools_modal_form_wrapper(variable_get('popup'), $form_state);

     if (!empty($form_state['executed'])) {
         $output = array();
         $output[] = ctools_ajax_command_reload();
     }
    print ajax_render($output);
    exit;
  }else {
      return drupal_get_form(variable_get('popup'));
   }
}

/**
 * Callback function edit node bundle (availability).
 */

function edit_availability($js) {
   if ($js) {
       global $user;
       ctools_include('node.pages', 'node', '');
       ctools_include('modal');
       ctools_include('ajax');

       $node = node_load(arg(1));

       $form_state = array(
           'ajax' => TRUE,
           'title' => t('Editar disponibilidad'),
       );

       $form_state['build_info']['args'] = array($node);
       $output = ctools_modal_form_wrapper(variable_get('popup'), $form_state);

       if (!empty($form_state['executed'])) {
           $output = array();
           $output[] = ctools_ajax_command_reload();
       }
      print ajax_render($output);
      exit;
    }else {
           return drupal_get_form(variable_get('popup'));
     }
}

/**
 * Callback function delete node bundle (availability).
 */

function delete_availability($js) {
  if ($js) {
      ctools_include('ajax');
      ctools_include('modal');
   
      $form_state = array(
        'ajax' => TRUE,
        'nid' => arg(1),
        'title' => t('Eliminar'),
      );

      $output = ctools_modal_form_wrapper('agenda_form', $form_state);
      
      if (!empty($form_state['ajax_commands'])) {
        $output = $form_state['ajax_commands'];
      }

      print ajax_render($output);
      drupal_exit();
    }
    else {
      return drupal_get_form('agenda_form');
    }
}


/**
 * Callback function delete node bundle (availability).
 */

function quotes_delete($js) {
  if ($js) {
      ctools_include('ajax');
      ctools_include('modal');
   
      $form_state = array(
        'ajax' => TRUE,
        'nid' => arg(1),
        'title' => t('Eliminar Cita'),
      );

      $output = ctools_modal_form_wrapper('quotes_delete_form', $form_state);
      
      if (!empty($form_state['ajax_commands'])) {
        $output = $form_state['ajax_commands'];
      }

      print ajax_render($output);
      drupal_exit();
    }
    else {
      return drupal_get_form('quotes_delete_form');
    }
}