<?php

include_once 'blocks/agenda.block.inc';
include_once 'forms/agenda.forms.inc';
require_once(DRUPAL_ROOT . "/modules/node/node.pages.inc");

/**
 * Implements hook_init().
 */
function agenda_init() {
    drupal_add_css(drupal_get_path('module', 'agenda') . '/css/style.css');
    if (current_path() == 'calendario-consejero/diario') {
      drupal_add_js(drupal_get_path('module', 'agenda') . '/js/agenda.js');
    }
}

/**
 * Implementacion del hook menu.
 */

function agenda_menu() {
 $items = array();

 $items['request/%ctools_js'] = array(
    'title' => t('Create node api ctools'),
    'page callback' => 'request_callback',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['availability/%/%ctools_js'] = array(
      'title' => t('Render node save api ctools'),
      'page callback' => 'render_availability',
      'page arguments' => array(1),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    );

  $items['availability-edit/%/%ctools_js'] = array(
      'title' => t('Edit node api ctools'),
      'page callback' => 'edit_availability',
      'page arguments' => array(1),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    );

  $items['availability-delete/%/%ctools_js'] = array(
      'title' => t('Delete node api ctools'),
      'page callback' => 'delete_availability',
      'page arguments' => array(1),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    );

   return $items;
}

/**
 * Implements hook_form_alter().
 */

function agenda_form_alter(&$form, &$form_state, $form_id) {
   
    switch ($form_id) {
     case 'disponibilidad_node_form':
       Global $user;
       $form['title']['#required'] = FALSE;
       $current_path = explode("/", current_path());
       $path = array_shift($current_path);

       if ($path == 'request' || $path == 'availability-edit') {
           $form['title']['#access'] = FALSE;
           $form['field_operaciones']['#access'] = FALSE;
           $form['field_usuario']['#access'] = FALSE;
           $form['field_profile']['#access'] = FALSE;
           $form['field_citas_agenda']['#access'] = FALSE;
       }

      if (current_path() == 'request/ajax') {
         $form['field_citas_agenda']['#access'] = FALSE;
         $form['field_profile']['#access'] = FALSE;
      }

      break;
      
      case 'user_login':
          $form['info'] = array(
            '#type' => 'item',
            '#markup' => 'Las personas que no tengan usuario y clave uniandes pueden comunicarse con la Decanatura de Estudiantes para recibir atención personalizada, en el teléfono 339 49 49 Ext. 2207, de lunes a viernes en horario de 8:00 a.m a 5:00 p.m.',
            '#attributes' => array('class' => array('info-extra-login')),
          );
          $form['enlace'] = array(
            '#type' => 'item',
            '#markup' => l(t('Olvido su clave'), 'user/password'),
            '#attributes' => array('class' => array('info-link-login')),
          );          
      break;      
      } 
}

/**
 * Implements hook_node_presave().
 */

function agenda_node_presave($node) {
   $node->title = $node->name . " - " . date('m-d-Y',$node->created);
   $wrapper = entity_metadata_wrapper('node', $node);
   $date = $wrapper->field_fecha->value();
   $time = date_format(date_create($date['value']), 'g:i A') . ' - ' . date_format(date_create($date['value2']), 'g:i A'); 
   $service = $wrapper->field_tipo_de_servicio->value()->name;
   $wrapper->field_operaciones->set($time . ' ' . $service); 
}

/**
 * Implements hook_field_formatter_info().
 */

function agenda_field_formatter_info() {
  $info = array(
      'operation_node' => array(
        'label' => t('Operation Node'), 
        'field types' => array('text'),
        'description' => t('Field manage edit/delete for node'),
      ), 
    );
  return $info; 
}

/**
 * Implements hook_field_formatter_view().
 */

function agenda_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
    $element = array();
      switch ($display['type']) {
        case 'operation_node':
          foreach ($items as $delta => $item) {
            $element[$delta] = array(
              '#theme' => 'operations-node-availability', 
            );
         }
          break;
      }
      return $element; 
}

/**
 * Implements hook_theme().
 */

function agenda_theme($existing, $type, $theme, $path) {
  $module_path = drupal_get_path('module', 'agenda');
  $base = array(
    'path' => "$module_path/theme",
  );
  $themes = array(
    'item-calendar' => $base + array(
     'template' => 'item-calendar',
     'variables' => array('value' => NULL),
    ),
  );

  $themes = array(
    'operations-node-availability' => array(
    'template' => 'theme/operations-node-availability',
    ),
  );

  return $themes; 
}

/**
 * Implements hook_help().
 */

function agenda_help($path, $arg) {
  switch ($path) {
    case 'admin/help#agenda':
      return '<p>' . t('Help module', array('storage' => 'Help module' )) . '</p>';
  }
}

/**
 * Implements hook_permission().
 */

function agenda_permission() {
  return array(
    'administer agenda' =>  array(
      'title' => t('Administer Agenda'),
      'description' => t('Perform administration agenda'),
    ),
  );
}

/**
 * Implements hook_theme_registry_alter().
 */

function agenda_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['calendar_item'])) {
     $theme_registry['calendar_item']['path'] = drupal_get_path('module', 'agenda') . '/theme';
     $theme_registry['calendar_item']['theme path'] = drupal_get_path('module', 'agenda') . '/theme';
     $theme_registry['calendar_item']['template'] = 'item-calendar';
  }
}

/**
 * Callback function render obj(node) availability.
 */

function render_availability($js) {
 if ($js) {
    ctools_include('modal');
    ctools_include('ajax');
  }
  $node = node_load(arg(1));
  $contents = render(node_view($node, 'teaser', NULL));
  return ctools_modal_render(t('Disponibilidad'), $contents);
}

/**
 * Callback function edit node bundle (availability).
 */

function edit_availability($js) {
   if ($js) {
       global $user;
       ctools_include('node.pages', 'node', '');
       ctools_include('modal');
       ctools_include('ajax');

       $node = node_load(arg(1));

       $form_state = array(
           'ajax' => TRUE,
           'title' => t('Edit availability'),
       );

       $form_state['build_info']['args'] = array($node);
       $output = ctools_modal_form_wrapper(variable_get('popup'), $form_state);

       if (!empty($form_state['executed'])) {
           $output = array();
           $output[] = ctools_ajax_command_reload();
       }
      print ajax_render($output);
      exit;
    }else {
           return drupal_get_form(variable_get('popup'));
     }
}

/**
 * Callback function delete node bundle (availability).
 */

function delete_availability($js) {
  if ($js) {
      ctools_include('ajax');
      ctools_include('modal');
   
      $form_state = array(
        'ajax' => TRUE,
        'nid' => arg(1),
        'title' => t('Delete availability'),
      );

      $output = ctools_modal_form_wrapper('agenda_form', $form_state);
      
      if (!empty($form_state['ajax_commands'])) {
        $output = $form_state['ajax_commands'];
      }

      print ajax_render($output);
      drupal_exit();
    }
    else {
      return drupal_get_form('agenda_form');
    }
}

/**
 * Callback function render new obj(node) availability.
 */

function request_callback($ajax){
    if ($ajax) {
     global $user;
     ctools_include('node.pages', 'node', '');
     ctools_include('modal');
     ctools_include('ajax');

     $node = (object) array(
         'uid' => $user->uid,
         'name' => (isset($user->name) ? $user->name : ''),
         'type' => variable_get('content_type'),
         'language' => LANGUAGE_NONE,
         'class' => array('jdcb1219'),
     );

     $form_state = array(
         'ajax' => TRUE,
         'title' => t('created of availability'),
         'class' => array('jdcb1218'),
     );


     $form_state['build_info']['args'] = array($node);
     $output = ctools_modal_form_wrapper(variable_get('popup'), $form_state);

     if (!empty($form_state['executed'])) {
         $output = array();
         $output[] = ctools_ajax_command_reload();
     }
    print ajax_render($output);
    exit;
  }else {
      return drupal_get_form(variable_get('popup'));
   }
}

/**
 * Implements hook_form() for delete node(obj) bundle (availability).
 */

function agenda_form($form, &$form_state) {
  $form = array();
 
  $form['from'] = array(
   '#type'=> 'item',
   '#markup' => t('¿Are you sure you want to delete? ').$form_state["nid"],
 );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
  );
  return $form;
}

/**
 * Implements hook_form_submit() delete node bundle (availability).
 */

function agenda_form_submit($form, &$form_state) {
  $form = array();
  ctools_include('modal');
  ctools_include('ajax');
  node_delete($form_state["nid"]);
  $form_state['ajax_commands'][] = ctools_modal_command_dismiss();
  $form_state['ajax_commands'][] = ctools_ajax_command_reload();
  return $form;
}



